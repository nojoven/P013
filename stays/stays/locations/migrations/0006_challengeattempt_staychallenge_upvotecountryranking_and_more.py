# Generated by Django 4.2.4 on 2023-12-31 20:23

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ("cities_light", "0011_alter_city_country_alter_city_region_and_more"),
        ("core", "0023_delete_guess_and_more"),
        ("locations", "0005_staycountry_staycountryhasguess_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="ChallengeAttempt",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("profile_of_attempt", models.SlugField(max_length=500, null=True)),
                ("date_of_attempt", models.DateTimeField(auto_now_add=True)),
                (
                    "number_of_attempts",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, message="Number of attempts cannot be negative."
                            ),
                            django.core.validators.MaxValueValidator(
                                15,
                                message="Number of attempts cannot exceed the maximum allowed.",
                            ),
                        ],
                    ),
                ),
                ("is_answer_correct", models.BooleanField(default=False)),
                (
                    "answer_of_profile",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cities_light.city",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="StayChallenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "challenge_text",
                    models.CharField(
                        default="Guess where it happened :", max_length=255, null=True
                    ),
                ),
                ("is_open", models.BooleanField(default=False)),
                ("max_number_of_attempts", models.IntegerField(default=15)),
                ("has_winner", models.BooleanField(default=False)),
                ("start_date", models.DateTimeField(null=True)),
                ("date_of_success", models.DateTimeField(null=True)),
                ("end_date_limit", models.DateTimeField(null=True)),
                (
                    "publication_identifier",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.publication",
                    ),
                ),
                (
                    "right_answer",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="cities_light.city",
                    ),
                ),
                (
                    "winner_slug",
                    models.ForeignKey(
                        max_length=500,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="locations.challengeattempt",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="UpvoteCountryRanking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("country_name", models.CharField(max_length=255, unique=True)),
                (
                    "total_upvotes",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, message="Total upvotes cannot be negative."
                            )
                        ],
                    ),
                ),
            ],
        ),
        migrations.DeleteModel(
            name="StayCountryHasGuess",
        ),
        migrations.DeleteModel(
            name="StayCountryHasRanking",
        ),
        migrations.RenameField(
            model_name="staycountry",
            old_name="continent",
            new_name="continent_name",
        ),
        migrations.RenameField(
            model_name="staycountry",
            old_name="country",
            new_name="country_name",
        ),
        migrations.AddField(
            model_name="staycountryhasupvotes",
            name="country_of_stay",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="cities_light.country",
            ),
        ),
        migrations.AlterField(
            model_name="staycountryhasupvotes",
            name="upvotes_count",
            field=models.IntegerField(
                default=0,
                validators=[
                    django.core.validators.MinValueValidator(
                        0, message="Upvotes count cannot be negative."
                    )
                ],
            ),
        ),
        migrations.AddField(
            model_name="challengeattempt",
            name="challenge",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="locations.staychallenge",
            ),
        ),
    ]
